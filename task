# @title Установка библиотек
!pip install torch torchvision torchaudio --quiet
!pip install ultralytics --quiet
!pip install matplotlib seaborn pandas tqdm plotly scikit-learn --quiet
!pip install wandb --quiet

# @title Импорт библиотек
import torch
import numpy as np
import cv2
import os
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from tqdm.notebook import tqdm
import plotly.express as px
from sklearn.metrics import precision_recall_curve, confusion_matrix
import wandb
import random

from IPython.display import display
from google.colab.patches import cv2_imshow

# @title Загрузка COCO128
from ultralytics import YOLO

# Загружаем маленький набор данных COCO128
!wget https://ultralytics.com/assets/coco128.zip
!unzip -o coco128.zip -d datasets/

# @title Пересоздание coco128.yaml с абсолютными путями

import yaml

data = {
    'train': os.path.abspath("datasets/coco128/images/train2017"),
    'val': os.path.abspath("datasets/coco128/images/train2017"),
    'nc': 80,
    'names': [f"class_{i}" for i in range(80)]
}

yaml_path = "datasets/coco128/coco128.yaml"
with open(yaml_path, 'w') as f:
    yaml.dump(data, f, sort_keys=False)

print(f"✅ Новый coco128.yaml создан: {yaml_path}")

# @title Визуализация случайного изображения с bounding box


# Пути к данным
data_dir = "datasets/coco128"
img_dir = os.path.join(data_dir, "images", "train2017")
label_dir = os.path.join(data_dir, "labels", "train2017")

# Получаем список изображений
img_files = [f for f in os.listdir(img_dir) if f.endswith('.jpg')]
if not img_files:
    print("Нет доступных изображений.")
else:
    # Выбираем случайное изображение
    img_name = random.choice(img_files)
    img_path = os.path.join(img_dir, img_name)
    label_path = os.path.join(label_dir, img_name.replace(".jpg", ".txt"))

    # Загружаем изображение
    img = cv2.imread(img_path)
    if img is None:
        print("Не удалось прочитать изображение.")
    else:
        h, w = img.shape[:2]

        # Читаем разметку
        with open(label_path, 'r') as f:
            labels = f.readlines()

        # Рисуем bounding box'ы
        for label in labels:
            cls, xc, yc, bw, bh = map(float, label.strip().split())
            x1 = int((xc - bw / 2) * w)
            y1 = int((yc - bh / 2) * h)
            x2 = int((xc + bw / 2) * w)
            y2 = int((yc + bh / 2) * h)
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)

        print(f"Отображено изображение: {img_name}")
        cv2_imshow(img)

# @title Обучение YOLOv8n
model = YOLO("yolov8n.pt")  # загружаем предобученную модель
results = model.train(data="datasets/coco128/coco128.yaml", epochs=5, imgsz=640)

# @title Чтение метрик из CSV

results_path = "runs/detect/train/results.csv"
df = pd.read_csv(results_path)
df.columns = df.columns.str.strip()  # убираем лишние пробелы в названиях столбцов
df.head()

# @title Графики обучения

# Убираем лишние пробелы в названиях колонок (если были)
df.columns = df.columns.str.strip()

plt.figure(figsize=(16, 6))

# --- График 1: Box Loss ---
plt.subplot(1, 2, 1)
plt.plot(df['train/box_loss'], label='Train Box Loss', color='blue')
plt.plot(df['val/box_loss'], label='Val Box Loss', color='orange')
plt.title('Box Loss (Localization Error)')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.grid(True)
plt.legend()

# --- График 2: mAP и метрики ---
plt.subplot(1, 2, 2)
plt.plot(df['metrics/mAP50-95(B)'], label='mAP 50-95', color='green')
plt.plot(df['metrics/precision(B)'], label='Precision', color='purple')
plt.plot(df['metrics/recall(B)'], label='Recall', color='brown')
plt.title('Validation Metrics')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

# @title Валидация модели
model.val()

# @title Пример визуализации Bounding Box

data_dir = "datasets/coco128"
img_dir = os.path.join(data_dir, "images", "train2017")
label_dir = os.path.join(data_dir, "labels", "train2017")

img_files = [f for f in os.listdir(img_dir) if f.endswith('.jpg')]
img_name = random.choice(img_files)

img_path = os.path.join(img_dir, img_name)
label_path = os.path.join(label_dir, img_name.replace(".jpg", ".txt"))

img = cv2.imread(img_path)
h, w = img.shape[:2]

with open(label_path, 'r') as f:
    labels = f.readlines()

for label in labels:
    cls, xc, yc, bw, bh = map(float, label.strip().split())
    x1 = int((xc - bw / 2) * w)
    y1 = int((yc - bh / 2) * h)
    x2 = int((xc + bw / 2) * w)
    y2 = int((yc + bh / 2) * h)
    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)

print(f"Отображено изображение: {img_name}")
cv2_imshow(img)

